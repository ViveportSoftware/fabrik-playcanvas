import * as pc from 'playcanvas';
import { AvatarPart } from './AvatarPart';
import { Renderer } from './Renderer';
export declare class AvatarRenderer extends Renderer {
    avatarEntity?: pc.Entity;
    private ikBoneRootEntity?;
    private isRenderForwardLines;
    private boneLengthMap;
    private scale;
    private localTargetMap;
    private scaleAvatarWithHDMCallback;
    private fitXRCameraToAvatarHeadCallback;
    constructor(app?: pc.Application | undefined, rootEntity?: pc.Entity | undefined, avatarEntity?: pc.Entity | undefined, isLocalDemo?: boolean);
    init(): Promise<void>;
    addAvatar(): pc.Entity | undefined;
    getAvatarEntity(): pc.Entity | undefined;
    getAvatarHipsPosition(): pc.Vec3 | undefined;
    addBone(length: number, color: pc.Color, prefix?: string): pc.Entity;
    addTarget(name?: string): pc.Entity;
    addLocalTarget(name?: string): void;
    private addLocalForwardPoint;
    setLocalTargetWithLocalPos(name: string, localPos: pc.Vec3): void;
    update(): void;
    private renderAvatarForwardLines;
    private renderAvatarForwardLine;
    private renderAvatarLeftArmForwardLines;
    private renderAvatarRightArmForwardLines;
    private renderAvatarLeftLegForwardLines;
    private renderAvatarRightLegForwardLines;
    calculateBoneLenth(): Map<AvatarPart, number>;
    private calculateBoneLengthNeck;
    private calculateBoneLengthHipsToSpine;
    private calculateBoneLengthSpine;
    private calculateBoneLengthChest;
    private calculateBoneLengthUpperChest;
    private calculateBoneLengthRightShoulder;
    private calculateBoneLengthRightUpperArm;
    private calculateBoneLengthRightLowerArm;
    private calculateBoneLengthRightHand;
    private calculateBoneLengthLeftShoulder;
    private calculateBoneLengthLeftUpperArm;
    private calculateBoneLengthLeftLowerArm;
    private calculateBoneLengthLeftHand;
    private calculateBoneLengthRightHip;
    private calculateBoneLengthRightUpperLeg;
    private calculateBoneLengthRightLowerLeg;
    private calculateBoneLengthRightFoot;
    private calculateBoneLengthLeftHip;
    private calculateBoneLengthLeftUpperLeg;
    private calculateBoneLengthLeftLowerLeg;
    private calculateBoneLengthLeftFoot;
    addScaleAvatarWithHMDCallback(fn: (boneLengthMap: Map<AvatarPart, number>) => void): void;
    addFitXRCameraToAvatarHeadCallback(fn: (boneLengthMap: Map<AvatarPart, number>) => void): void;
    scaleAvatarWithHMD(): void;
    fitXRCameraToAvatarHead(): void;
    getAvatarEntityForward(): pc.Vec3 | undefined;
    getAvatarScale(): number;
}
